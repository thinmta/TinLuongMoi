///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'NganHang_SoDuBanDau_TaiKhoanKeToan'
// Generated by LLBLGen v1.3.5996.26197 Final on: Saturday, March 20, 2021, 11:06:06 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace CtyTinLuong
{
	/// <summary>
	/// Purpose: Data Access class for the table 'NganHang_SoDuBanDau_TaiKhoanKeToan'.
	/// </summary>
	public partial class clsNganHang_SoDuBanDau_TaiKhoanKeToan : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bTonTai, m_bNgungTheoDoi;
			private SqlDouble		m_fNoKhong, m_fCoKhong;
			private SqlInt32		m_iID_ChiTiet_TaiKhoanSoDuBanDau, m_iID_TaiKhoanKeToanCon, m_iID_TaiKhoanKeToanMe;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsNganHang_SoDuBanDau_TaiKhoanKeToan()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_TaiKhoanKeToanCon</LI>
		///		 <LI>iID_TaiKhoanKeToanMe</LI>
		///		 <LI>fCoKhong</LI>
		///		 <LI>fNoKhong</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID_ChiTiet_TaiKhoanSoDuBanDau</LI>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NganHang_SoDuBanDau_TaiKhoanKeToan_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_TaiKhoanKeToanCon", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_TaiKhoanKeToanCon));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_TaiKhoanKeToanMe", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_TaiKhoanKeToanMe));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fCoKhong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fCoKhong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fNoKhong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fNoKhong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTiet_TaiKhoanSoDuBanDau", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTiet_TaiKhoanSoDuBanDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_ChiTiet_TaiKhoanSoDuBanDau = (SqlInt32)scmCmdToExecute.Parameters["@iID_ChiTiet_TaiKhoanSoDuBanDau"].Value;
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NganHang_SoDuBanDau_TaiKhoanKeToan_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNganHang_SoDuBanDau_TaiKhoanKeToan::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_ChiTiet_TaiKhoanSoDuBanDau</LI>
		///		 <LI>iID_TaiKhoanKeToanCon</LI>
		///		 <LI>iID_TaiKhoanKeToanMe</LI>
		///		 <LI>fCoKhong</LI>
		///		 <LI>fNoKhong</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NganHang_SoDuBanDau_TaiKhoanKeToan_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTiet_TaiKhoanSoDuBanDau", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTiet_TaiKhoanSoDuBanDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_TaiKhoanKeToanCon", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_TaiKhoanKeToanCon));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_TaiKhoanKeToanMe", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_TaiKhoanKeToanMe));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fCoKhong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fCoKhong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fNoKhong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fNoKhong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NganHang_SoDuBanDau_TaiKhoanKeToan_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNganHang_SoDuBanDau_TaiKhoanKeToan::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_ChiTiet_TaiKhoanSoDuBanDau</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NganHang_SoDuBanDau_TaiKhoanKeToan_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTiet_TaiKhoanSoDuBanDau", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTiet_TaiKhoanSoDuBanDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NganHang_SoDuBanDau_TaiKhoanKeToan_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNganHang_SoDuBanDau_TaiKhoanKeToan::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_ChiTiet_TaiKhoanSoDuBanDau</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iID_ChiTiet_TaiKhoanSoDuBanDau</LI>
		///		 <LI>iID_TaiKhoanKeToanCon</LI>
		///		 <LI>iID_TaiKhoanKeToanMe</LI>
		///		 <LI>fCoKhong</LI>
		///		 <LI>fNoKhong</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NganHang_SoDuBanDau_TaiKhoanKeToan_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("NganHang_SoDuBanDau_TaiKhoanKeToan");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChiTiet_TaiKhoanSoDuBanDau", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChiTiet_TaiKhoanSoDuBanDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NganHang_SoDuBanDau_TaiKhoanKeToan_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_ChiTiet_TaiKhoanSoDuBanDau = (Int32)dtToReturn.Rows[0]["ID_ChiTiet_TaiKhoanSoDuBanDau"];
					m_iID_TaiKhoanKeToanCon = (Int32)dtToReturn.Rows[0]["ID_TaiKhoanKeToanCon"];
					m_iID_TaiKhoanKeToanMe = (Int32)dtToReturn.Rows[0]["ID_TaiKhoanKeToanMe"];
					m_fCoKhong = (double)dtToReturn.Rows[0]["CoKhong"];
					m_fNoKhong = (double)dtToReturn.Rows[0]["NoKhong"];
					m_bTonTai = (bool)dtToReturn.Rows[0]["TonTai"];
					m_bNgungTheoDoi = (bool)dtToReturn.Rows[0]["NgungTheoDoi"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNganHang_SoDuBanDau_TaiKhoanKeToan::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NganHang_SoDuBanDau_TaiKhoanKeToan_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("NganHang_SoDuBanDau_TaiKhoanKeToan");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NganHang_SoDuBanDau_TaiKhoanKeToan_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNganHang_SoDuBanDau_TaiKhoanKeToan::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID_ChiTiet_TaiKhoanSoDuBanDau
		{
			get
			{
				return m_iID_ChiTiet_TaiKhoanSoDuBanDau;
			}
			set
			{
				SqlInt32 iID_ChiTiet_TaiKhoanSoDuBanDauTmp = (SqlInt32)value;
				if(iID_ChiTiet_TaiKhoanSoDuBanDauTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_ChiTiet_TaiKhoanSoDuBanDau", "iID_ChiTiet_TaiKhoanSoDuBanDau can't be NULL");
				}
				m_iID_ChiTiet_TaiKhoanSoDuBanDau = value;
			}
		}


		public SqlInt32 iID_TaiKhoanKeToanCon
		{
			get
			{
				return m_iID_TaiKhoanKeToanCon;
			}
			set
			{
				SqlInt32 iID_TaiKhoanKeToanConTmp = (SqlInt32)value;
				if(iID_TaiKhoanKeToanConTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_TaiKhoanKeToanCon", "iID_TaiKhoanKeToanCon can't be NULL");
				}
				m_iID_TaiKhoanKeToanCon = value;
			}
		}


		public SqlInt32 iID_TaiKhoanKeToanMe
		{
			get
			{
				return m_iID_TaiKhoanKeToanMe;
			}
			set
			{
				SqlInt32 iID_TaiKhoanKeToanMeTmp = (SqlInt32)value;
				if(iID_TaiKhoanKeToanMeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_TaiKhoanKeToanMe", "iID_TaiKhoanKeToanMe can't be NULL");
				}
				m_iID_TaiKhoanKeToanMe = value;
			}
		}


		public SqlDouble fCoKhong
		{
			get
			{
				return m_fCoKhong;
			}
			set
			{
				SqlDouble fCoKhongTmp = (SqlDouble)value;
				if(fCoKhongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fCoKhong", "fCoKhong can't be NULL");
				}
				m_fCoKhong = value;
			}
		}


		public SqlDouble fNoKhong
		{
			get
			{
				return m_fNoKhong;
			}
			set
			{
				SqlDouble fNoKhongTmp = (SqlDouble)value;
				if(fNoKhongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fNoKhong", "fNoKhong can't be NULL");
				}
				m_fNoKhong = value;
			}
		}


		public SqlBoolean bTonTai
		{
			get
			{
				return m_bTonTai;
			}
			set
			{
				SqlBoolean bTonTaiTmp = (SqlBoolean)value;
				if(bTonTaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bTonTai", "bTonTai can't be NULL");
				}
				m_bTonTai = value;
			}
		}


		public SqlBoolean bNgungTheoDoi
		{
			get
			{
				return m_bNgungTheoDoi;
			}
			set
			{
				SqlBoolean bNgungTheoDoiTmp = (SqlBoolean)value;
				if(bNgungTheoDoiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bNgungTheoDoi", "bNgungTheoDoi can't be NULL");
				}
				m_bNgungTheoDoi = value;
			}
		}
		#endregion
	}
}
